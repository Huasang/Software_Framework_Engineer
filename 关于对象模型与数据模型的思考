
中文描述：

  -----------------------------     
  -VO(展示对象模型)   --展示层--
  -DTO(数据传输模型)  --服务层--
  -DO（领域模型）     --领域层--
  -PO（持久化模型）   --持久层--
  -----------------------------     
  
以上四种常见的对象模型通常以层次化的方式分布在软件系统中，这是一种有序的垂直结构，在分布式系统下，通常以DTO作为传输单元来进行水平连接。

想要在软件构架与构建过程中合理的运用上述四种对象模型，必须思考几个问题？

1.他们各自是什么？有什么用？
2.他们的联系是什么？
3.如何去应用他们？

关于这四种模型的定义、作用与应用，我们很容易在互联网中发现，这不是本文重点，暂略过。重点探讨一下他们的联系。

在实际开发过程中，通常可以认为这四类对象都可以充当数据载体，他们之间的关联通常以数据传递作为重点而非消息。
所以从这一角度观察，这四类对象模型可以认为是数据模型。

数据在模型间流动的过程中又产生了几个问题。

1.数据？
1.数据的流向？
2.流动的过程中经历了怎样的变化？
3.流动的过程中应遵守怎样的约束？

在面向对象的编程世界里，我们通常讲数据定义为一个变量（常量），由一个二元组构成（类型,值）
数据的流向是允许双向的，流动的过程中，数据的变化与约束来源于数据模型间的适配，适配的本质是（类型,值）的适配。
在一般的软件框架中通常我们使用特性（C#内容，有点像注解）来声明数据转换过程与约束，这显得较为松散，不易于管理，侵入性较强，且缺乏运行时的灵活性。

为解决这一问题，我们可以认为，无论是单机还是多机环境，都可认为不同类型数据在一个抽象的管道中进行有序的流动。
借助MDD（模型驱动开发）的思想，可以定制一种更高级的数据模型UDM（统一数据模型,可以基于上述四种模型进行联系构建出一种中间模型，也可以直接摒弃常用模型而只采用一种直接模型）（他的表现不一定是对象，可以是平台无关的如XML，数据库...等等）来对数据在管道中流动过程进行描述。
注：UDM是自己编的名字，查不到。。。

这种模型的好处是：

1.强大的自描述性
2.有利于平台数据结构的统一
3.可以不关注细节，透明的进行数据路由操作
4.有利于MDD实践，方便构建快速生产过程

怎么说呢，开发中想要更好的解决问题就是抽象，如果不行就再抽象，但是这个过程却是千人千面，不仅来自于程序世界，历史留给我们的财富是宝贵的，但始终是建议，抛开人云亦云才是真正的悟道。

时间关系，暂不上代码，日后补充。

